// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: ft_state.proto
#ifndef GRPC_ft_5fstate_2eproto__INCLUDED
#define GRPC_ft_5fstate_2eproto__INCLUDED

#include "ft_state.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace dejavu_ft {

class Controller final {
 public:
  static constexpr char const* service_full_name() {
    return "dejavu_ft.Controller";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status SendHeartbeat(::grpc::ClientContext* context, const ::dejavu_ft::HeartBeatRequest& request, ::dejavu_ft::HeartBeatResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dejavu_ft::HeartBeatResponse>> AsyncSendHeartbeat(::grpc::ClientContext* context, const ::dejavu_ft::HeartBeatRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dejavu_ft::HeartBeatResponse>>(AsyncSendHeartbeatRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dejavu_ft::HeartBeatResponse>> PrepareAsyncSendHeartbeat(::grpc::ClientContext* context, const ::dejavu_ft::HeartBeatRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dejavu_ft::HeartBeatResponse>>(PrepareAsyncSendHeartbeatRaw(context, request, cq));
    }
    virtual ::grpc::Status SendCacheAck(::grpc::ClientContext* context, const ::dejavu_ft::CacheRequest& request, ::dejavu_ft::CacheResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dejavu_ft::CacheResponse>> AsyncSendCacheAck(::grpc::ClientContext* context, const ::dejavu_ft::CacheRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dejavu_ft::CacheResponse>>(AsyncSendCacheAckRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dejavu_ft::CacheResponse>> PrepareAsyncSendCacheAck(::grpc::ClientContext* context, const ::dejavu_ft::CacheRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dejavu_ft::CacheResponse>>(PrepareAsyncSendCacheAckRaw(context, request, cq));
    }
    virtual ::grpc::Status SendToken(::grpc::ClientContext* context, const ::dejavu_ft::TokenRequest& request, ::dejavu_ft::TokenResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dejavu_ft::TokenResponse>> AsyncSendToken(::grpc::ClientContext* context, const ::dejavu_ft::TokenRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dejavu_ft::TokenResponse>>(AsyncSendTokenRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dejavu_ft::TokenResponse>> PrepareAsyncSendToken(::grpc::ClientContext* context, const ::dejavu_ft::TokenRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dejavu_ft::TokenResponse>>(PrepareAsyncSendTokenRaw(context, request, cq));
    }
    virtual ::grpc::Status GetInfo(::grpc::ClientContext* context, const ::dejavu_ft::StartUpInfoRequest& request, ::dejavu_ft::StartUpInfoResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dejavu_ft::StartUpInfoResponse>> AsyncGetInfo(::grpc::ClientContext* context, const ::dejavu_ft::StartUpInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dejavu_ft::StartUpInfoResponse>>(AsyncGetInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dejavu_ft::StartUpInfoResponse>> PrepareAsyncGetInfo(::grpc::ClientContext* context, const ::dejavu_ft::StartUpInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dejavu_ft::StartUpInfoResponse>>(PrepareAsyncGetInfoRaw(context, request, cq));
    }
    virtual ::grpc::Status Reset(::grpc::ClientContext* context, const ::dejavu_ft::ResetRequest& request, ::dejavu_ft::ResetResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dejavu_ft::ResetResponse>> AsyncReset(::grpc::ClientContext* context, const ::dejavu_ft::ResetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dejavu_ft::ResetResponse>>(AsyncResetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dejavu_ft::ResetResponse>> PrepareAsyncReset(::grpc::ClientContext* context, const ::dejavu_ft::ResetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dejavu_ft::ResetResponse>>(PrepareAsyncResetRaw(context, request, cq));
    }
    virtual ::grpc::Status MarkUbatchFinished(::grpc::ClientContext* context, const ::dejavu_ft::UbatchFinishedRequest& request, ::dejavu_ft::UbatchFinishedResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dejavu_ft::UbatchFinishedResponse>> AsyncMarkUbatchFinished(::grpc::ClientContext* context, const ::dejavu_ft::UbatchFinishedRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dejavu_ft::UbatchFinishedResponse>>(AsyncMarkUbatchFinishedRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dejavu_ft::UbatchFinishedResponse>> PrepareAsyncMarkUbatchFinished(::grpc::ClientContext* context, const ::dejavu_ft::UbatchFinishedRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dejavu_ft::UbatchFinishedResponse>>(PrepareAsyncMarkUbatchFinishedRaw(context, request, cq));
    }
    virtual ::grpc::Status IsReady(::grpc::ClientContext* context, const ::dejavu_ft::IsReadyRequest& request, ::dejavu_ft::IsReadyResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dejavu_ft::IsReadyResponse>> AsyncIsReady(::grpc::ClientContext* context, const ::dejavu_ft::IsReadyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dejavu_ft::IsReadyResponse>>(AsyncIsReadyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dejavu_ft::IsReadyResponse>> PrepareAsyncIsReady(::grpc::ClientContext* context, const ::dejavu_ft::IsReadyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dejavu_ft::IsReadyResponse>>(PrepareAsyncIsReadyRaw(context, request, cq));
    }
    virtual ::grpc::Status MarkRestart(::grpc::ClientContext* context, const ::dejavu_ft::IsRestartRequest& request, ::dejavu_ft::IsRestartResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dejavu_ft::IsRestartResponse>> AsyncMarkRestart(::grpc::ClientContext* context, const ::dejavu_ft::IsRestartRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dejavu_ft::IsRestartResponse>>(AsyncMarkRestartRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dejavu_ft::IsRestartResponse>> PrepareAsyncMarkRestart(::grpc::ClientContext* context, const ::dejavu_ft::IsRestartRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dejavu_ft::IsRestartResponse>>(PrepareAsyncMarkRestartRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void SendHeartbeat(::grpc::ClientContext* context, const ::dejavu_ft::HeartBeatRequest* request, ::dejavu_ft::HeartBeatResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SendCacheAck(::grpc::ClientContext* context, const ::dejavu_ft::CacheRequest* request, ::dejavu_ft::CacheResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SendToken(::grpc::ClientContext* context, const ::dejavu_ft::TokenRequest* request, ::dejavu_ft::TokenResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetInfo(::grpc::ClientContext* context, const ::dejavu_ft::StartUpInfoRequest* request, ::dejavu_ft::StartUpInfoResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Reset(::grpc::ClientContext* context, const ::dejavu_ft::ResetRequest* request, ::dejavu_ft::ResetResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void MarkUbatchFinished(::grpc::ClientContext* context, const ::dejavu_ft::UbatchFinishedRequest* request, ::dejavu_ft::UbatchFinishedResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void IsReady(::grpc::ClientContext* context, const ::dejavu_ft::IsReadyRequest* request, ::dejavu_ft::IsReadyResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void MarkRestart(::grpc::ClientContext* context, const ::dejavu_ft::IsRestartRequest* request, ::dejavu_ft::IsRestartResponse* response, std::function<void(::grpc::Status)>) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dejavu_ft::HeartBeatResponse>* AsyncSendHeartbeatRaw(::grpc::ClientContext* context, const ::dejavu_ft::HeartBeatRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dejavu_ft::HeartBeatResponse>* PrepareAsyncSendHeartbeatRaw(::grpc::ClientContext* context, const ::dejavu_ft::HeartBeatRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dejavu_ft::CacheResponse>* AsyncSendCacheAckRaw(::grpc::ClientContext* context, const ::dejavu_ft::CacheRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dejavu_ft::CacheResponse>* PrepareAsyncSendCacheAckRaw(::grpc::ClientContext* context, const ::dejavu_ft::CacheRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dejavu_ft::TokenResponse>* AsyncSendTokenRaw(::grpc::ClientContext* context, const ::dejavu_ft::TokenRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dejavu_ft::TokenResponse>* PrepareAsyncSendTokenRaw(::grpc::ClientContext* context, const ::dejavu_ft::TokenRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dejavu_ft::StartUpInfoResponse>* AsyncGetInfoRaw(::grpc::ClientContext* context, const ::dejavu_ft::StartUpInfoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dejavu_ft::StartUpInfoResponse>* PrepareAsyncGetInfoRaw(::grpc::ClientContext* context, const ::dejavu_ft::StartUpInfoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dejavu_ft::ResetResponse>* AsyncResetRaw(::grpc::ClientContext* context, const ::dejavu_ft::ResetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dejavu_ft::ResetResponse>* PrepareAsyncResetRaw(::grpc::ClientContext* context, const ::dejavu_ft::ResetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dejavu_ft::UbatchFinishedResponse>* AsyncMarkUbatchFinishedRaw(::grpc::ClientContext* context, const ::dejavu_ft::UbatchFinishedRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dejavu_ft::UbatchFinishedResponse>* PrepareAsyncMarkUbatchFinishedRaw(::grpc::ClientContext* context, const ::dejavu_ft::UbatchFinishedRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dejavu_ft::IsReadyResponse>* AsyncIsReadyRaw(::grpc::ClientContext* context, const ::dejavu_ft::IsReadyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dejavu_ft::IsReadyResponse>* PrepareAsyncIsReadyRaw(::grpc::ClientContext* context, const ::dejavu_ft::IsReadyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dejavu_ft::IsRestartResponse>* AsyncMarkRestartRaw(::grpc::ClientContext* context, const ::dejavu_ft::IsRestartRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dejavu_ft::IsRestartResponse>* PrepareAsyncMarkRestartRaw(::grpc::ClientContext* context, const ::dejavu_ft::IsRestartRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status SendHeartbeat(::grpc::ClientContext* context, const ::dejavu_ft::HeartBeatRequest& request, ::dejavu_ft::HeartBeatResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dejavu_ft::HeartBeatResponse>> AsyncSendHeartbeat(::grpc::ClientContext* context, const ::dejavu_ft::HeartBeatRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dejavu_ft::HeartBeatResponse>>(AsyncSendHeartbeatRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dejavu_ft::HeartBeatResponse>> PrepareAsyncSendHeartbeat(::grpc::ClientContext* context, const ::dejavu_ft::HeartBeatRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dejavu_ft::HeartBeatResponse>>(PrepareAsyncSendHeartbeatRaw(context, request, cq));
    }
    ::grpc::Status SendCacheAck(::grpc::ClientContext* context, const ::dejavu_ft::CacheRequest& request, ::dejavu_ft::CacheResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dejavu_ft::CacheResponse>> AsyncSendCacheAck(::grpc::ClientContext* context, const ::dejavu_ft::CacheRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dejavu_ft::CacheResponse>>(AsyncSendCacheAckRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dejavu_ft::CacheResponse>> PrepareAsyncSendCacheAck(::grpc::ClientContext* context, const ::dejavu_ft::CacheRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dejavu_ft::CacheResponse>>(PrepareAsyncSendCacheAckRaw(context, request, cq));
    }
    ::grpc::Status SendToken(::grpc::ClientContext* context, const ::dejavu_ft::TokenRequest& request, ::dejavu_ft::TokenResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dejavu_ft::TokenResponse>> AsyncSendToken(::grpc::ClientContext* context, const ::dejavu_ft::TokenRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dejavu_ft::TokenResponse>>(AsyncSendTokenRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dejavu_ft::TokenResponse>> PrepareAsyncSendToken(::grpc::ClientContext* context, const ::dejavu_ft::TokenRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dejavu_ft::TokenResponse>>(PrepareAsyncSendTokenRaw(context, request, cq));
    }
    ::grpc::Status GetInfo(::grpc::ClientContext* context, const ::dejavu_ft::StartUpInfoRequest& request, ::dejavu_ft::StartUpInfoResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dejavu_ft::StartUpInfoResponse>> AsyncGetInfo(::grpc::ClientContext* context, const ::dejavu_ft::StartUpInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dejavu_ft::StartUpInfoResponse>>(AsyncGetInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dejavu_ft::StartUpInfoResponse>> PrepareAsyncGetInfo(::grpc::ClientContext* context, const ::dejavu_ft::StartUpInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dejavu_ft::StartUpInfoResponse>>(PrepareAsyncGetInfoRaw(context, request, cq));
    }
    ::grpc::Status Reset(::grpc::ClientContext* context, const ::dejavu_ft::ResetRequest& request, ::dejavu_ft::ResetResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dejavu_ft::ResetResponse>> AsyncReset(::grpc::ClientContext* context, const ::dejavu_ft::ResetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dejavu_ft::ResetResponse>>(AsyncResetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dejavu_ft::ResetResponse>> PrepareAsyncReset(::grpc::ClientContext* context, const ::dejavu_ft::ResetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dejavu_ft::ResetResponse>>(PrepareAsyncResetRaw(context, request, cq));
    }
    ::grpc::Status MarkUbatchFinished(::grpc::ClientContext* context, const ::dejavu_ft::UbatchFinishedRequest& request, ::dejavu_ft::UbatchFinishedResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dejavu_ft::UbatchFinishedResponse>> AsyncMarkUbatchFinished(::grpc::ClientContext* context, const ::dejavu_ft::UbatchFinishedRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dejavu_ft::UbatchFinishedResponse>>(AsyncMarkUbatchFinishedRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dejavu_ft::UbatchFinishedResponse>> PrepareAsyncMarkUbatchFinished(::grpc::ClientContext* context, const ::dejavu_ft::UbatchFinishedRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dejavu_ft::UbatchFinishedResponse>>(PrepareAsyncMarkUbatchFinishedRaw(context, request, cq));
    }
    ::grpc::Status IsReady(::grpc::ClientContext* context, const ::dejavu_ft::IsReadyRequest& request, ::dejavu_ft::IsReadyResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dejavu_ft::IsReadyResponse>> AsyncIsReady(::grpc::ClientContext* context, const ::dejavu_ft::IsReadyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dejavu_ft::IsReadyResponse>>(AsyncIsReadyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dejavu_ft::IsReadyResponse>> PrepareAsyncIsReady(::grpc::ClientContext* context, const ::dejavu_ft::IsReadyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dejavu_ft::IsReadyResponse>>(PrepareAsyncIsReadyRaw(context, request, cq));
    }
    ::grpc::Status MarkRestart(::grpc::ClientContext* context, const ::dejavu_ft::IsRestartRequest& request, ::dejavu_ft::IsRestartResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dejavu_ft::IsRestartResponse>> AsyncMarkRestart(::grpc::ClientContext* context, const ::dejavu_ft::IsRestartRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dejavu_ft::IsRestartResponse>>(AsyncMarkRestartRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dejavu_ft::IsRestartResponse>> PrepareAsyncMarkRestart(::grpc::ClientContext* context, const ::dejavu_ft::IsRestartRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dejavu_ft::IsRestartResponse>>(PrepareAsyncMarkRestartRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void SendHeartbeat(::grpc::ClientContext* context, const ::dejavu_ft::HeartBeatRequest* request, ::dejavu_ft::HeartBeatResponse* response, std::function<void(::grpc::Status)>) override;
      void SendCacheAck(::grpc::ClientContext* context, const ::dejavu_ft::CacheRequest* request, ::dejavu_ft::CacheResponse* response, std::function<void(::grpc::Status)>) override;
      void SendToken(::grpc::ClientContext* context, const ::dejavu_ft::TokenRequest* request, ::dejavu_ft::TokenResponse* response, std::function<void(::grpc::Status)>) override;
      void GetInfo(::grpc::ClientContext* context, const ::dejavu_ft::StartUpInfoRequest* request, ::dejavu_ft::StartUpInfoResponse* response, std::function<void(::grpc::Status)>) override;
      void Reset(::grpc::ClientContext* context, const ::dejavu_ft::ResetRequest* request, ::dejavu_ft::ResetResponse* response, std::function<void(::grpc::Status)>) override;
      void MarkUbatchFinished(::grpc::ClientContext* context, const ::dejavu_ft::UbatchFinishedRequest* request, ::dejavu_ft::UbatchFinishedResponse* response, std::function<void(::grpc::Status)>) override;
      void IsReady(::grpc::ClientContext* context, const ::dejavu_ft::IsReadyRequest* request, ::dejavu_ft::IsReadyResponse* response, std::function<void(::grpc::Status)>) override;
      void MarkRestart(::grpc::ClientContext* context, const ::dejavu_ft::IsRestartRequest* request, ::dejavu_ft::IsRestartResponse* response, std::function<void(::grpc::Status)>) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::dejavu_ft::HeartBeatResponse>* AsyncSendHeartbeatRaw(::grpc::ClientContext* context, const ::dejavu_ft::HeartBeatRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dejavu_ft::HeartBeatResponse>* PrepareAsyncSendHeartbeatRaw(::grpc::ClientContext* context, const ::dejavu_ft::HeartBeatRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dejavu_ft::CacheResponse>* AsyncSendCacheAckRaw(::grpc::ClientContext* context, const ::dejavu_ft::CacheRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dejavu_ft::CacheResponse>* PrepareAsyncSendCacheAckRaw(::grpc::ClientContext* context, const ::dejavu_ft::CacheRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dejavu_ft::TokenResponse>* AsyncSendTokenRaw(::grpc::ClientContext* context, const ::dejavu_ft::TokenRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dejavu_ft::TokenResponse>* PrepareAsyncSendTokenRaw(::grpc::ClientContext* context, const ::dejavu_ft::TokenRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dejavu_ft::StartUpInfoResponse>* AsyncGetInfoRaw(::grpc::ClientContext* context, const ::dejavu_ft::StartUpInfoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dejavu_ft::StartUpInfoResponse>* PrepareAsyncGetInfoRaw(::grpc::ClientContext* context, const ::dejavu_ft::StartUpInfoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dejavu_ft::ResetResponse>* AsyncResetRaw(::grpc::ClientContext* context, const ::dejavu_ft::ResetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dejavu_ft::ResetResponse>* PrepareAsyncResetRaw(::grpc::ClientContext* context, const ::dejavu_ft::ResetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dejavu_ft::UbatchFinishedResponse>* AsyncMarkUbatchFinishedRaw(::grpc::ClientContext* context, const ::dejavu_ft::UbatchFinishedRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dejavu_ft::UbatchFinishedResponse>* PrepareAsyncMarkUbatchFinishedRaw(::grpc::ClientContext* context, const ::dejavu_ft::UbatchFinishedRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dejavu_ft::IsReadyResponse>* AsyncIsReadyRaw(::grpc::ClientContext* context, const ::dejavu_ft::IsReadyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dejavu_ft::IsReadyResponse>* PrepareAsyncIsReadyRaw(::grpc::ClientContext* context, const ::dejavu_ft::IsReadyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dejavu_ft::IsRestartResponse>* AsyncMarkRestartRaw(::grpc::ClientContext* context, const ::dejavu_ft::IsRestartRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dejavu_ft::IsRestartResponse>* PrepareAsyncMarkRestartRaw(::grpc::ClientContext* context, const ::dejavu_ft::IsRestartRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_SendHeartbeat_;
    const ::grpc::internal::RpcMethod rpcmethod_SendCacheAck_;
    const ::grpc::internal::RpcMethod rpcmethod_SendToken_;
    const ::grpc::internal::RpcMethod rpcmethod_GetInfo_;
    const ::grpc::internal::RpcMethod rpcmethod_Reset_;
    const ::grpc::internal::RpcMethod rpcmethod_MarkUbatchFinished_;
    const ::grpc::internal::RpcMethod rpcmethod_IsReady_;
    const ::grpc::internal::RpcMethod rpcmethod_MarkRestart_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status SendHeartbeat(::grpc::ServerContext* context, const ::dejavu_ft::HeartBeatRequest* request, ::dejavu_ft::HeartBeatResponse* response);
    virtual ::grpc::Status SendCacheAck(::grpc::ServerContext* context, const ::dejavu_ft::CacheRequest* request, ::dejavu_ft::CacheResponse* response);
    virtual ::grpc::Status SendToken(::grpc::ServerContext* context, const ::dejavu_ft::TokenRequest* request, ::dejavu_ft::TokenResponse* response);
    virtual ::grpc::Status GetInfo(::grpc::ServerContext* context, const ::dejavu_ft::StartUpInfoRequest* request, ::dejavu_ft::StartUpInfoResponse* response);
    virtual ::grpc::Status Reset(::grpc::ServerContext* context, const ::dejavu_ft::ResetRequest* request, ::dejavu_ft::ResetResponse* response);
    virtual ::grpc::Status MarkUbatchFinished(::grpc::ServerContext* context, const ::dejavu_ft::UbatchFinishedRequest* request, ::dejavu_ft::UbatchFinishedResponse* response);
    virtual ::grpc::Status IsReady(::grpc::ServerContext* context, const ::dejavu_ft::IsReadyRequest* request, ::dejavu_ft::IsReadyResponse* response);
    virtual ::grpc::Status MarkRestart(::grpc::ServerContext* context, const ::dejavu_ft::IsRestartRequest* request, ::dejavu_ft::IsRestartResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_SendHeartbeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SendHeartbeat() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_SendHeartbeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendHeartbeat(::grpc::ServerContext* context, const ::dejavu_ft::HeartBeatRequest* request, ::dejavu_ft::HeartBeatResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendHeartbeat(::grpc::ServerContext* context, ::dejavu_ft::HeartBeatRequest* request, ::grpc::ServerAsyncResponseWriter< ::dejavu_ft::HeartBeatResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SendCacheAck : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SendCacheAck() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_SendCacheAck() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendCacheAck(::grpc::ServerContext* context, const ::dejavu_ft::CacheRequest* request, ::dejavu_ft::CacheResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendCacheAck(::grpc::ServerContext* context, ::dejavu_ft::CacheRequest* request, ::grpc::ServerAsyncResponseWriter< ::dejavu_ft::CacheResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SendToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SendToken() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_SendToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendToken(::grpc::ServerContext* context, const ::dejavu_ft::TokenRequest* request, ::dejavu_ft::TokenResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendToken(::grpc::ServerContext* context, ::dejavu_ft::TokenRequest* request, ::grpc::ServerAsyncResponseWriter< ::dejavu_ft::TokenResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetInfo() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetInfo(::grpc::ServerContext* context, const ::dejavu_ft::StartUpInfoRequest* request, ::dejavu_ft::StartUpInfoResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetInfo(::grpc::ServerContext* context, ::dejavu_ft::StartUpInfoRequest* request, ::grpc::ServerAsyncResponseWriter< ::dejavu_ft::StartUpInfoResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Reset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Reset() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_Reset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Reset(::grpc::ServerContext* context, const ::dejavu_ft::ResetRequest* request, ::dejavu_ft::ResetResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReset(::grpc::ServerContext* context, ::dejavu_ft::ResetRequest* request, ::grpc::ServerAsyncResponseWriter< ::dejavu_ft::ResetResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_MarkUbatchFinished : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_MarkUbatchFinished() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_MarkUbatchFinished() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MarkUbatchFinished(::grpc::ServerContext* context, const ::dejavu_ft::UbatchFinishedRequest* request, ::dejavu_ft::UbatchFinishedResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMarkUbatchFinished(::grpc::ServerContext* context, ::dejavu_ft::UbatchFinishedRequest* request, ::grpc::ServerAsyncResponseWriter< ::dejavu_ft::UbatchFinishedResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_IsReady : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_IsReady() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_IsReady() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsReady(::grpc::ServerContext* context, const ::dejavu_ft::IsReadyRequest* request, ::dejavu_ft::IsReadyResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestIsReady(::grpc::ServerContext* context, ::dejavu_ft::IsReadyRequest* request, ::grpc::ServerAsyncResponseWriter< ::dejavu_ft::IsReadyResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_MarkRestart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_MarkRestart() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_MarkRestart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MarkRestart(::grpc::ServerContext* context, const ::dejavu_ft::IsRestartRequest* request, ::dejavu_ft::IsRestartResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMarkRestart(::grpc::ServerContext* context, ::dejavu_ft::IsRestartRequest* request, ::grpc::ServerAsyncResponseWriter< ::dejavu_ft::IsRestartResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_SendHeartbeat<WithAsyncMethod_SendCacheAck<WithAsyncMethod_SendToken<WithAsyncMethod_GetInfo<WithAsyncMethod_Reset<WithAsyncMethod_MarkUbatchFinished<WithAsyncMethod_IsReady<WithAsyncMethod_MarkRestart<Service > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_SendHeartbeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SendHeartbeat() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_SendHeartbeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendHeartbeat(::grpc::ServerContext* context, const ::dejavu_ft::HeartBeatRequest* request, ::dejavu_ft::HeartBeatResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SendCacheAck : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SendCacheAck() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_SendCacheAck() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendCacheAck(::grpc::ServerContext* context, const ::dejavu_ft::CacheRequest* request, ::dejavu_ft::CacheResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SendToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SendToken() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_SendToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendToken(::grpc::ServerContext* context, const ::dejavu_ft::TokenRequest* request, ::dejavu_ft::TokenResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetInfo() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetInfo(::grpc::ServerContext* context, const ::dejavu_ft::StartUpInfoRequest* request, ::dejavu_ft::StartUpInfoResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Reset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Reset() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_Reset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Reset(::grpc::ServerContext* context, const ::dejavu_ft::ResetRequest* request, ::dejavu_ft::ResetResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_MarkUbatchFinished : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_MarkUbatchFinished() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_MarkUbatchFinished() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MarkUbatchFinished(::grpc::ServerContext* context, const ::dejavu_ft::UbatchFinishedRequest* request, ::dejavu_ft::UbatchFinishedResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_IsReady : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_IsReady() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_IsReady() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsReady(::grpc::ServerContext* context, const ::dejavu_ft::IsReadyRequest* request, ::dejavu_ft::IsReadyResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_MarkRestart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_MarkRestart() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_MarkRestart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MarkRestart(::grpc::ServerContext* context, const ::dejavu_ft::IsRestartRequest* request, ::dejavu_ft::IsRestartResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_SendHeartbeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_SendHeartbeat() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_SendHeartbeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendHeartbeat(::grpc::ServerContext* context, const ::dejavu_ft::HeartBeatRequest* request, ::dejavu_ft::HeartBeatResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendHeartbeat(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SendCacheAck : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_SendCacheAck() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_SendCacheAck() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendCacheAck(::grpc::ServerContext* context, const ::dejavu_ft::CacheRequest* request, ::dejavu_ft::CacheResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendCacheAck(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SendToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_SendToken() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_SendToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendToken(::grpc::ServerContext* context, const ::dejavu_ft::TokenRequest* request, ::dejavu_ft::TokenResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendToken(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetInfo() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_GetInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetInfo(::grpc::ServerContext* context, const ::dejavu_ft::StartUpInfoRequest* request, ::dejavu_ft::StartUpInfoResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetInfo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Reset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Reset() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_Reset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Reset(::grpc::ServerContext* context, const ::dejavu_ft::ResetRequest* request, ::dejavu_ft::ResetResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReset(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_MarkUbatchFinished : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_MarkUbatchFinished() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_MarkUbatchFinished() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MarkUbatchFinished(::grpc::ServerContext* context, const ::dejavu_ft::UbatchFinishedRequest* request, ::dejavu_ft::UbatchFinishedResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMarkUbatchFinished(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_IsReady : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_IsReady() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_IsReady() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsReady(::grpc::ServerContext* context, const ::dejavu_ft::IsReadyRequest* request, ::dejavu_ft::IsReadyResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestIsReady(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_MarkRestart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_MarkRestart() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_MarkRestart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MarkRestart(::grpc::ServerContext* context, const ::dejavu_ft::IsRestartRequest* request, ::dejavu_ft::IsRestartResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMarkRestart(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SendHeartbeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SendHeartbeat() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::dejavu_ft::HeartBeatRequest, ::dejavu_ft::HeartBeatResponse>(std::bind(&WithStreamedUnaryMethod_SendHeartbeat<BaseClass>::StreamedSendHeartbeat, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SendHeartbeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SendHeartbeat(::grpc::ServerContext* context, const ::dejavu_ft::HeartBeatRequest* request, ::dejavu_ft::HeartBeatResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSendHeartbeat(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::dejavu_ft::HeartBeatRequest,::dejavu_ft::HeartBeatResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SendCacheAck : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SendCacheAck() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::dejavu_ft::CacheRequest, ::dejavu_ft::CacheResponse>(std::bind(&WithStreamedUnaryMethod_SendCacheAck<BaseClass>::StreamedSendCacheAck, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SendCacheAck() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SendCacheAck(::grpc::ServerContext* context, const ::dejavu_ft::CacheRequest* request, ::dejavu_ft::CacheResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSendCacheAck(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::dejavu_ft::CacheRequest,::dejavu_ft::CacheResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SendToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SendToken() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::dejavu_ft::TokenRequest, ::dejavu_ft::TokenResponse>(std::bind(&WithStreamedUnaryMethod_SendToken<BaseClass>::StreamedSendToken, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SendToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SendToken(::grpc::ServerContext* context, const ::dejavu_ft::TokenRequest* request, ::dejavu_ft::TokenResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSendToken(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::dejavu_ft::TokenRequest,::dejavu_ft::TokenResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetInfo() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::dejavu_ft::StartUpInfoRequest, ::dejavu_ft::StartUpInfoResponse>(std::bind(&WithStreamedUnaryMethod_GetInfo<BaseClass>::StreamedGetInfo, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetInfo(::grpc::ServerContext* context, const ::dejavu_ft::StartUpInfoRequest* request, ::dejavu_ft::StartUpInfoResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetInfo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::dejavu_ft::StartUpInfoRequest,::dejavu_ft::StartUpInfoResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Reset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Reset() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::dejavu_ft::ResetRequest, ::dejavu_ft::ResetResponse>(std::bind(&WithStreamedUnaryMethod_Reset<BaseClass>::StreamedReset, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Reset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Reset(::grpc::ServerContext* context, const ::dejavu_ft::ResetRequest* request, ::dejavu_ft::ResetResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedReset(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::dejavu_ft::ResetRequest,::dejavu_ft::ResetResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_MarkUbatchFinished : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_MarkUbatchFinished() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler< ::dejavu_ft::UbatchFinishedRequest, ::dejavu_ft::UbatchFinishedResponse>(std::bind(&WithStreamedUnaryMethod_MarkUbatchFinished<BaseClass>::StreamedMarkUbatchFinished, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_MarkUbatchFinished() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status MarkUbatchFinished(::grpc::ServerContext* context, const ::dejavu_ft::UbatchFinishedRequest* request, ::dejavu_ft::UbatchFinishedResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedMarkUbatchFinished(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::dejavu_ft::UbatchFinishedRequest,::dejavu_ft::UbatchFinishedResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_IsReady : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_IsReady() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler< ::dejavu_ft::IsReadyRequest, ::dejavu_ft::IsReadyResponse>(std::bind(&WithStreamedUnaryMethod_IsReady<BaseClass>::StreamedIsReady, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_IsReady() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status IsReady(::grpc::ServerContext* context, const ::dejavu_ft::IsReadyRequest* request, ::dejavu_ft::IsReadyResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedIsReady(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::dejavu_ft::IsReadyRequest,::dejavu_ft::IsReadyResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_MarkRestart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_MarkRestart() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler< ::dejavu_ft::IsRestartRequest, ::dejavu_ft::IsRestartResponse>(std::bind(&WithStreamedUnaryMethod_MarkRestart<BaseClass>::StreamedMarkRestart, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_MarkRestart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status MarkRestart(::grpc::ServerContext* context, const ::dejavu_ft::IsRestartRequest* request, ::dejavu_ft::IsRestartResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedMarkRestart(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::dejavu_ft::IsRestartRequest,::dejavu_ft::IsRestartResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_SendHeartbeat<WithStreamedUnaryMethod_SendCacheAck<WithStreamedUnaryMethod_SendToken<WithStreamedUnaryMethod_GetInfo<WithStreamedUnaryMethod_Reset<WithStreamedUnaryMethod_MarkUbatchFinished<WithStreamedUnaryMethod_IsReady<WithStreamedUnaryMethod_MarkRestart<Service > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_SendHeartbeat<WithStreamedUnaryMethod_SendCacheAck<WithStreamedUnaryMethod_SendToken<WithStreamedUnaryMethod_GetInfo<WithStreamedUnaryMethod_Reset<WithStreamedUnaryMethod_MarkUbatchFinished<WithStreamedUnaryMethod_IsReady<WithStreamedUnaryMethod_MarkRestart<Service > > > > > > > > StreamedService;
};

}  // namespace dejavu_ft


#endif  // GRPC_ft_5fstate_2eproto__INCLUDED
