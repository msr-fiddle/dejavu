// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: ft_state.proto

#include "ft_state.pb.h"
#include "ft_state.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace dejavu_ft {

static const char* Controller_method_names[] = {
  "/dejavu_ft.Controller/SendHeartbeat",
  "/dejavu_ft.Controller/SendCacheAck",
  "/dejavu_ft.Controller/SendToken",
  "/dejavu_ft.Controller/GetInfo",
  "/dejavu_ft.Controller/Reset",
  "/dejavu_ft.Controller/MarkUbatchFinished",
  "/dejavu_ft.Controller/IsReady",
  "/dejavu_ft.Controller/MarkRestart",
};

std::unique_ptr< Controller::Stub> Controller::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Controller::Stub> stub(new Controller::Stub(channel));
  return stub;
}

Controller::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_SendHeartbeat_(Controller_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SendCacheAck_(Controller_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SendToken_(Controller_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetInfo_(Controller_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Reset_(Controller_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_MarkUbatchFinished_(Controller_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_IsReady_(Controller_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_MarkRestart_(Controller_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Controller::Stub::SendHeartbeat(::grpc::ClientContext* context, const ::dejavu_ft::HeartBeatRequest& request, ::dejavu_ft::HeartBeatResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SendHeartbeat_, context, request, response);
}

void Controller::Stub::experimental_async::SendHeartbeat(::grpc::ClientContext* context, const ::dejavu_ft::HeartBeatRequest* request, ::dejavu_ft::HeartBeatResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SendHeartbeat_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::dejavu_ft::HeartBeatResponse>* Controller::Stub::AsyncSendHeartbeatRaw(::grpc::ClientContext* context, const ::dejavu_ft::HeartBeatRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::dejavu_ft::HeartBeatResponse>::Create(channel_.get(), cq, rpcmethod_SendHeartbeat_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::dejavu_ft::HeartBeatResponse>* Controller::Stub::PrepareAsyncSendHeartbeatRaw(::grpc::ClientContext* context, const ::dejavu_ft::HeartBeatRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::dejavu_ft::HeartBeatResponse>::Create(channel_.get(), cq, rpcmethod_SendHeartbeat_, context, request, false);
}

::grpc::Status Controller::Stub::SendCacheAck(::grpc::ClientContext* context, const ::dejavu_ft::CacheRequest& request, ::dejavu_ft::CacheResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SendCacheAck_, context, request, response);
}

void Controller::Stub::experimental_async::SendCacheAck(::grpc::ClientContext* context, const ::dejavu_ft::CacheRequest* request, ::dejavu_ft::CacheResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SendCacheAck_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::dejavu_ft::CacheResponse>* Controller::Stub::AsyncSendCacheAckRaw(::grpc::ClientContext* context, const ::dejavu_ft::CacheRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::dejavu_ft::CacheResponse>::Create(channel_.get(), cq, rpcmethod_SendCacheAck_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::dejavu_ft::CacheResponse>* Controller::Stub::PrepareAsyncSendCacheAckRaw(::grpc::ClientContext* context, const ::dejavu_ft::CacheRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::dejavu_ft::CacheResponse>::Create(channel_.get(), cq, rpcmethod_SendCacheAck_, context, request, false);
}

::grpc::Status Controller::Stub::SendToken(::grpc::ClientContext* context, const ::dejavu_ft::TokenRequest& request, ::dejavu_ft::TokenResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SendToken_, context, request, response);
}

void Controller::Stub::experimental_async::SendToken(::grpc::ClientContext* context, const ::dejavu_ft::TokenRequest* request, ::dejavu_ft::TokenResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SendToken_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::dejavu_ft::TokenResponse>* Controller::Stub::AsyncSendTokenRaw(::grpc::ClientContext* context, const ::dejavu_ft::TokenRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::dejavu_ft::TokenResponse>::Create(channel_.get(), cq, rpcmethod_SendToken_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::dejavu_ft::TokenResponse>* Controller::Stub::PrepareAsyncSendTokenRaw(::grpc::ClientContext* context, const ::dejavu_ft::TokenRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::dejavu_ft::TokenResponse>::Create(channel_.get(), cq, rpcmethod_SendToken_, context, request, false);
}

::grpc::Status Controller::Stub::GetInfo(::grpc::ClientContext* context, const ::dejavu_ft::StartUpInfoRequest& request, ::dejavu_ft::StartUpInfoResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetInfo_, context, request, response);
}

void Controller::Stub::experimental_async::GetInfo(::grpc::ClientContext* context, const ::dejavu_ft::StartUpInfoRequest* request, ::dejavu_ft::StartUpInfoResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetInfo_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::dejavu_ft::StartUpInfoResponse>* Controller::Stub::AsyncGetInfoRaw(::grpc::ClientContext* context, const ::dejavu_ft::StartUpInfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::dejavu_ft::StartUpInfoResponse>::Create(channel_.get(), cq, rpcmethod_GetInfo_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::dejavu_ft::StartUpInfoResponse>* Controller::Stub::PrepareAsyncGetInfoRaw(::grpc::ClientContext* context, const ::dejavu_ft::StartUpInfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::dejavu_ft::StartUpInfoResponse>::Create(channel_.get(), cq, rpcmethod_GetInfo_, context, request, false);
}

::grpc::Status Controller::Stub::Reset(::grpc::ClientContext* context, const ::dejavu_ft::ResetRequest& request, ::dejavu_ft::ResetResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Reset_, context, request, response);
}

void Controller::Stub::experimental_async::Reset(::grpc::ClientContext* context, const ::dejavu_ft::ResetRequest* request, ::dejavu_ft::ResetResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Reset_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::dejavu_ft::ResetResponse>* Controller::Stub::AsyncResetRaw(::grpc::ClientContext* context, const ::dejavu_ft::ResetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::dejavu_ft::ResetResponse>::Create(channel_.get(), cq, rpcmethod_Reset_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::dejavu_ft::ResetResponse>* Controller::Stub::PrepareAsyncResetRaw(::grpc::ClientContext* context, const ::dejavu_ft::ResetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::dejavu_ft::ResetResponse>::Create(channel_.get(), cq, rpcmethod_Reset_, context, request, false);
}

::grpc::Status Controller::Stub::MarkUbatchFinished(::grpc::ClientContext* context, const ::dejavu_ft::UbatchFinishedRequest& request, ::dejavu_ft::UbatchFinishedResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_MarkUbatchFinished_, context, request, response);
}

void Controller::Stub::experimental_async::MarkUbatchFinished(::grpc::ClientContext* context, const ::dejavu_ft::UbatchFinishedRequest* request, ::dejavu_ft::UbatchFinishedResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_MarkUbatchFinished_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::dejavu_ft::UbatchFinishedResponse>* Controller::Stub::AsyncMarkUbatchFinishedRaw(::grpc::ClientContext* context, const ::dejavu_ft::UbatchFinishedRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::dejavu_ft::UbatchFinishedResponse>::Create(channel_.get(), cq, rpcmethod_MarkUbatchFinished_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::dejavu_ft::UbatchFinishedResponse>* Controller::Stub::PrepareAsyncMarkUbatchFinishedRaw(::grpc::ClientContext* context, const ::dejavu_ft::UbatchFinishedRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::dejavu_ft::UbatchFinishedResponse>::Create(channel_.get(), cq, rpcmethod_MarkUbatchFinished_, context, request, false);
}

::grpc::Status Controller::Stub::IsReady(::grpc::ClientContext* context, const ::dejavu_ft::IsReadyRequest& request, ::dejavu_ft::IsReadyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_IsReady_, context, request, response);
}

void Controller::Stub::experimental_async::IsReady(::grpc::ClientContext* context, const ::dejavu_ft::IsReadyRequest* request, ::dejavu_ft::IsReadyResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_IsReady_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::dejavu_ft::IsReadyResponse>* Controller::Stub::AsyncIsReadyRaw(::grpc::ClientContext* context, const ::dejavu_ft::IsReadyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::dejavu_ft::IsReadyResponse>::Create(channel_.get(), cq, rpcmethod_IsReady_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::dejavu_ft::IsReadyResponse>* Controller::Stub::PrepareAsyncIsReadyRaw(::grpc::ClientContext* context, const ::dejavu_ft::IsReadyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::dejavu_ft::IsReadyResponse>::Create(channel_.get(), cq, rpcmethod_IsReady_, context, request, false);
}

::grpc::Status Controller::Stub::MarkRestart(::grpc::ClientContext* context, const ::dejavu_ft::IsRestartRequest& request, ::dejavu_ft::IsRestartResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_MarkRestart_, context, request, response);
}

void Controller::Stub::experimental_async::MarkRestart(::grpc::ClientContext* context, const ::dejavu_ft::IsRestartRequest* request, ::dejavu_ft::IsRestartResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_MarkRestart_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::dejavu_ft::IsRestartResponse>* Controller::Stub::AsyncMarkRestartRaw(::grpc::ClientContext* context, const ::dejavu_ft::IsRestartRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::dejavu_ft::IsRestartResponse>::Create(channel_.get(), cq, rpcmethod_MarkRestart_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::dejavu_ft::IsRestartResponse>* Controller::Stub::PrepareAsyncMarkRestartRaw(::grpc::ClientContext* context, const ::dejavu_ft::IsRestartRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::dejavu_ft::IsRestartResponse>::Create(channel_.get(), cq, rpcmethod_MarkRestart_, context, request, false);
}

Controller::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Controller_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Controller::Service, ::dejavu_ft::HeartBeatRequest, ::dejavu_ft::HeartBeatResponse>(
          std::mem_fn(&Controller::Service::SendHeartbeat), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Controller_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Controller::Service, ::dejavu_ft::CacheRequest, ::dejavu_ft::CacheResponse>(
          std::mem_fn(&Controller::Service::SendCacheAck), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Controller_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Controller::Service, ::dejavu_ft::TokenRequest, ::dejavu_ft::TokenResponse>(
          std::mem_fn(&Controller::Service::SendToken), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Controller_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Controller::Service, ::dejavu_ft::StartUpInfoRequest, ::dejavu_ft::StartUpInfoResponse>(
          std::mem_fn(&Controller::Service::GetInfo), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Controller_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Controller::Service, ::dejavu_ft::ResetRequest, ::dejavu_ft::ResetResponse>(
          std::mem_fn(&Controller::Service::Reset), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Controller_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Controller::Service, ::dejavu_ft::UbatchFinishedRequest, ::dejavu_ft::UbatchFinishedResponse>(
          std::mem_fn(&Controller::Service::MarkUbatchFinished), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Controller_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Controller::Service, ::dejavu_ft::IsReadyRequest, ::dejavu_ft::IsReadyResponse>(
          std::mem_fn(&Controller::Service::IsReady), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Controller_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Controller::Service, ::dejavu_ft::IsRestartRequest, ::dejavu_ft::IsRestartResponse>(
          std::mem_fn(&Controller::Service::MarkRestart), this)));
}

Controller::Service::~Service() {
}

::grpc::Status Controller::Service::SendHeartbeat(::grpc::ServerContext* context, const ::dejavu_ft::HeartBeatRequest* request, ::dejavu_ft::HeartBeatResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Controller::Service::SendCacheAck(::grpc::ServerContext* context, const ::dejavu_ft::CacheRequest* request, ::dejavu_ft::CacheResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Controller::Service::SendToken(::grpc::ServerContext* context, const ::dejavu_ft::TokenRequest* request, ::dejavu_ft::TokenResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Controller::Service::GetInfo(::grpc::ServerContext* context, const ::dejavu_ft::StartUpInfoRequest* request, ::dejavu_ft::StartUpInfoResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Controller::Service::Reset(::grpc::ServerContext* context, const ::dejavu_ft::ResetRequest* request, ::dejavu_ft::ResetResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Controller::Service::MarkUbatchFinished(::grpc::ServerContext* context, const ::dejavu_ft::UbatchFinishedRequest* request, ::dejavu_ft::UbatchFinishedResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Controller::Service::IsReady(::grpc::ServerContext* context, const ::dejavu_ft::IsReadyRequest* request, ::dejavu_ft::IsReadyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Controller::Service::MarkRestart(::grpc::ServerContext* context, const ::dejavu_ft::IsRestartRequest* request, ::dejavu_ft::IsRestartResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace dejavu_ft

