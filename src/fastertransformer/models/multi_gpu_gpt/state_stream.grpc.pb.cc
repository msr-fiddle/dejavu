// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: state_stream.proto

#include "state_stream.pb.h"
#include "state_stream.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace dejavu {

static const char* DejaVuManager_method_names[] = {
  "/dejavu.DejaVuManager/Push",
  "/dejavu.DejaVuManager/Complete",
};

std::unique_ptr< DejaVuManager::Stub> DejaVuManager::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< DejaVuManager::Stub> stub(new DejaVuManager::Stub(channel));
  return stub;
}

DejaVuManager::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Push_(DejaVuManager_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Complete_(DejaVuManager_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status DejaVuManager::Stub::Push(::grpc::ClientContext* context, const ::dejavu::PushRequest& request, ::dejavu::PushResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Push_, context, request, response);
}

void DejaVuManager::Stub::experimental_async::Push(::grpc::ClientContext* context, const ::dejavu::PushRequest* request, ::dejavu::PushResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Push_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::dejavu::PushResponse>* DejaVuManager::Stub::AsyncPushRaw(::grpc::ClientContext* context, const ::dejavu::PushRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::dejavu::PushResponse>::Create(channel_.get(), cq, rpcmethod_Push_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::dejavu::PushResponse>* DejaVuManager::Stub::PrepareAsyncPushRaw(::grpc::ClientContext* context, const ::dejavu::PushRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::dejavu::PushResponse>::Create(channel_.get(), cq, rpcmethod_Push_, context, request, false);
}

::grpc::Status DejaVuManager::Stub::Complete(::grpc::ClientContext* context, const ::dejavu::CompleteRequest& request, ::dejavu::CompleteResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Complete_, context, request, response);
}

void DejaVuManager::Stub::experimental_async::Complete(::grpc::ClientContext* context, const ::dejavu::CompleteRequest* request, ::dejavu::CompleteResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Complete_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::dejavu::CompleteResponse>* DejaVuManager::Stub::AsyncCompleteRaw(::grpc::ClientContext* context, const ::dejavu::CompleteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::dejavu::CompleteResponse>::Create(channel_.get(), cq, rpcmethod_Complete_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::dejavu::CompleteResponse>* DejaVuManager::Stub::PrepareAsyncCompleteRaw(::grpc::ClientContext* context, const ::dejavu::CompleteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::dejavu::CompleteResponse>::Create(channel_.get(), cq, rpcmethod_Complete_, context, request, false);
}

DejaVuManager::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DejaVuManager_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DejaVuManager::Service, ::dejavu::PushRequest, ::dejavu::PushResponse>(
          std::mem_fn(&DejaVuManager::Service::Push), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DejaVuManager_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DejaVuManager::Service, ::dejavu::CompleteRequest, ::dejavu::CompleteResponse>(
          std::mem_fn(&DejaVuManager::Service::Complete), this)));
}

DejaVuManager::Service::~Service() {
}

::grpc::Status DejaVuManager::Service::Push(::grpc::ServerContext* context, const ::dejavu::PushRequest* request, ::dejavu::PushResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DejaVuManager::Service::Complete(::grpc::ServerContext* context, const ::dejavu::CompleteRequest* request, ::dejavu::CompleteResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace dejavu

